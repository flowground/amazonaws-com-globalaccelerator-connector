{
    "name": "amazonaws-com-globalaccelerator-connector",
    "version": "2018.0.0",
    "description": "AWS Global Accelerator This is the AWS Global Accelerator API Reference. This guide is for developers\nwho need detailed information about AWS Global Accelerator API actions, data\ntypes, and errors. For more information about Global Accelerator features, see\nthe AWS Global Accelerator Developer Guide\n[https://docs.aws.amazon.com/global-accelerator/latest/dg/Welcome.html]. \n\nAWS Global Accelerator is a network layer service in which you create\naccelerators to improve availability and performance for internet applications\nused by a global audience. \n\nGlobal Accelerator provides you with static IP addresses that you associate with\nyour accelerator. These IP addresses are anycast from the AWS edge network and\ndistribute incoming application traffic across multiple endpoint resources in\nmultiple AWS Regions, which increases the availability of your applications.\nEndpoints can be Elastic IP addresses, Network Load Balancers, and Application\nLoad Balancers that are located in one AWS Region or multiple Regions.\n\nGlobal Accelerator uses the AWS global network to route traffic to the optimal\nregional endpoint based on health, client location, and policies that you\nconfigure. The service reacts instantly to changes in health or configuration to\nensure that internet traffic from clients is directed to only healthy endpoints.\n\nGlobal Accelerator includes components that work together to help you improve\nperformance and availability for your applications:\n\nStatic IP address AWS Global Accelerator provides you with a set of static IP\naddresses which are anycast from the AWS edge network and serve as the single\nfixed entry points for your clients. If you already have Elastic Load Balancing\nor Elastic IP address resources set up for your applications, you can easily add\nthose to Global Accelerator to allow the resources to be accessed by a Global\nAccelerator static IP address.\n\nAccelerator An accelerator directs traffic to optimal endpoints over the AWS\nglobal network to improve availability and performance for your internet\napplications that have a global audience. Each accelerator includes one or more\nlisteners.\n\nNetwork zone A network zone services the static IP addresses for your\naccelerator from a unique IP subnet. Similar to an AWS Availability Zone, a\nnetwork zone is an isolated unit with its own set of physical infrastructure.\nWhen you configure an accelerator, Global Accelerator allocates two IPv4\naddresses for it. If one IP address from a network zone becomes unavailable due\nto IP address blocking by certain client networks, or network disruptions, then\nclient applications can retry on the healthy static IP address from the other\nisolated network zone.\n\nListener A listener processes inbound connections from clients to Global\nAccelerator, based on the protocol and port that you configure. Each listener\nhas one or more endpoint groups associated with it, and traffic is forwarded to\nendpoints in one of the groups. You associate endpoint groups with listeners by\nspecifying the Regions that you want to distribute traffic to. Traffic is\ndistributed to optimal endpoints within the endpoint groups associated with a\nlistener.\n\nEndpoint group Each endpoint group is associated with a specific AWS Region.\nEndpoint groups include one or more endpoints in the Region. You can increase or\nreduce the percentage of traffic that would be otherwise directed to an endpoint\ngroup by adjusting a setting called a traffic dial. The traffic dial lets you\neasily do performance testing or blue/green deployment testing for new releases\nacross different AWS Regions, for example. \n\nEndpoint An endpoint is an Elastic IP address, Network Load Balancer, or\nApplication Load Balancer. Traffic is routed to endpoints based on several\nfactors, including the geo-proximity to the user, the health of the endpoint,\nand the configuration options that you choose, such as endpoint weights. For\neach endpoint, you can configure weights, which are numbers that you can use to\nspecify the proportion of traffic to route to each one. This can be useful, for\nexample, to do performance testing within a Region.",
    "main": "component.json",
    "dependencies": {
        "elasticio-node": "0.0.9",
        "elasticio-sailor-nodejs": "^2.2.1",
        "swagger-client": "^3.8.22"
    },
    "author": {
        "name": "Deutsche Telekom AG"
    },
    "license": "Apache-2.0"
}